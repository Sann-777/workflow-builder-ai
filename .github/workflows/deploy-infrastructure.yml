name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (plan/apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'apply' }}
    runs-on: ubuntu-latest
    outputs:
      frontend_bucket: ${{ steps.outputs.outputs.frontend_bucket }}
      api_url: ${{ steps.outputs.outputs.api_url }}
      cloudfront_id: ${{ steps.outputs.outputs.cloudfront_id }}
      lambda_name: ${{ steps.outputs.outputs.lambda_name }}
    defaults:
      run:
        working-directory: infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY || '' }}" \
            -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: |
          (github.event.inputs.action == 'apply' || 
           (github.event_name == 'push' && github.ref == 'refs/heads/main')) &&
          steps.plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve -var="openai_api_key=${{ secrets.OPENAI_API_KEY || '' }}"

      - name: Extract Terraform Outputs
        id: outputs
        if: steps.plan.outcome == 'success' && github.event.inputs.action != 'destroy'
        run: |
          echo "frontend_bucket=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "lambda_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          
          # Save outputs to file for artifact
          terraform output -json > outputs.json

      - name: Upload Terraform Outputs
        if: steps.plan.outcome == 'success' && github.event.inputs.action != 'destroy'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: infrastructure/outputs.json
          retention-days: 30

      - name: Display Deployment Info
        if: steps.plan.outcome == 'success' && github.event.inputs.action != 'destroy'
        run: |
          echo "::notice::Infrastructure deployed successfully!"
          echo "::notice::Frontend Bucket: ${{ steps.outputs.outputs.frontend_bucket }}"
          echo "::notice::API URL: ${{ steps.outputs.outputs.api_url }}"
          echo "::notice::CloudFront ID: ${{ steps.outputs.outputs.cloudfront_id }}"
